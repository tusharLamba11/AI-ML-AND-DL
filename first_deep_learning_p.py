# -*- coding: utf-8 -*-
"""First_Deep_Learning_P.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SHaSQdQfYWn4tFAcPKS-BxlTqpOJ8uFR
"""

import keras
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""Load Data"""

(X_train, y_train), (X_test, y_test) = keras.datasets.fashion_mnist.load_data()

X_test.shape,y_test.shape

X_train.shape,y_train.shape

X_train[0]

class_labels = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

y_train[0]

plt.imshow(X_train[0], cmap='Greys')

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.imshow(X_train[i],cmap="BrBG_r")
    plt.axis('off')
    plt.title(class_labels[y_train[i]]+"="+str(y_train[i]), fontsize=20)

X_train = X_train/255
X_test = X_test/255

"""Feature Scaling-Used to covert to 0-1"""

X_train[0]

"""Building Neural Networks"""

model = keras.models.Sequential([
                         keras.layers.Flatten(input_shape=[28,28]),
                         keras.layers.Dense(units=32, activation='relu'), 
                         keras.layers.Dense(units=10, activation='softmax')


])

model.summary()

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

model.fit(X_train, y_train,epochs = 10)

"""Test and Evaluate Neural Network"""

model.evaluate(X_test,y_test)

y_pred = model.predict(X_test)

y_pred[0].round(2)

np.argmax(y_pred[0].round(2))

y_test[0]

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.imshow(X_test[i],cmap="BrBG_r")
    plt.axis('off')
    plt.title("Actual= {} \n Predicted = {}".format(class_labels[y_test[i]],class_labels[np.argmax(y_pred[i])]))

"""Confusion Matrix"""

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, [ np.argmax(i) for i in y_pred])

plt.figure(figsize=(16,9))
sns.heatmap(cm, annot=True, fmt = "d")

Classification Report

from sklearn.metrics import classification_report
cr = classification_report(y_test, [ np.argmax(i) for i in y_pred], target_names = class_labels,)

print(cr)

"""Save Model"""

model.save("MNIST_classifier_nn_model.h5")

model = keras.models.load_model("MNIST_classifier_nn_model.h5")

model.predict(X_test)